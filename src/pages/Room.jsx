import React, {useState, useEffect} from 'react'
import {databases, DATABASE_ID, COLLECTION_ID_MESSAGES ,client} from '../appwriteConfig'
import { ID, Query, Permission, Role} from 'appwrite';
import Header from '../Components/Header';
import { useAuth } from '../utils/AuthContext';
import {Trash2} from 'react-feather'


const Room = () => {

    const [messageBody, setMessageBody] = useState('')
    const [messages, setMessages] = useState([])

    //extract 'user'
    const {user} = useAuth()
    /*
        example of an user that is generated by appwrite:-
            {
                "$id": "66871886003757bb22b0",
                "$createdAt": "2024-07-04T21:47:56.459+00:00",
                "$updatedAt": "2024-07-04T21:47:56.459+00:00",
                "name": "Prabhat Mishra ",
                "registration": "2024-07-04T21:47:56.458+00:00",
                "status": true,
                "labels": [],
                "passwordUpdate": "2024-07-04T21:47:56.458+00:00",
                "email": "prabhatmishra398@gmail.com",
                "phone": "",
                "emailVerification": false,
                "phoneVerification": false,
                "mfa": false,
                "prefs": {},
                "targets": [],
                "accessedAt": "2024-07-04T21:47:56.458+00:00"
            }
    */

    useEffect(() => {
        
        getMessages();
      
        /*
            The Appwrite Realtime allows you to listen to any Appwrite events in realtime using the subscribe method.

            Instead of requesting new data via HTTP, the subscription will receive new data every time it changes, any connected client receives that update within milliseconds via a WebSocket connection.
        */

        // Subscribe to databases.collections.documents channel
        // callback will be executed on any create/update/delete events to any document in a collection.
        // study about real-time implementation of appwrite from the docs.

        const unsubscribe = client.subscribe(`databases.${DATABASE_ID}.collections.${COLLECTION_ID_MESSAGES}.documents`, response => {

            console.log("response realtime : ",response);

                /*
                    response : channels , events , payload , timestamp etc..
                */
               
            if(response.events.includes("databases.*.collections.*.documents.*.create")){
                console.log('A MESSAGE WAS CREATED')
                setMessages(prevState => [response.payload, ...prevState])
            }

            if(response.events.includes("databases.*.collections.*.documents.*.delete")){
                console.log('A MESSAGE WAS DELETED!!!')
                setMessages(prevState => prevState.filter(message => message.$id !== response.payload.$id))
                //message is nothing but a document consists of [username,user_id and body] and each meassage has an '$id'
            }
        },error => {
            console.log(error)
        }
    );

        // console.log('unsubscribe:', unsubscribe)
      
        // clean up function:-
        // when useEffect unmounts,we are going to  unsubscribe and then resubscribe on that final iteration so we have only one subscription  to this collection.
        return () => {
          unsubscribe();
        };
      }, []);


    
    //get information from database:-
    const getMessages = async () => {
        /*
            const result = await databases.listDocuments(
                '<DATABASE_ID>', // databaseId
                '<COLLECTION_ID>', // collectionId
                [] // queries (optional)
            );

            > Array of query strings generated using the Query class provided by the SDK.
            > Maximum of 100 queries are allowed, each 4096 characters long.

            Query.orderDesc("attribute") :- Orders results in descending order by attribute. Attribute must be indexed. Pass in an empty string to return in natural order.

            Query.limit(100) :- Limits the number of results returned by the query. Used for pagination. If the limit query is not used, the limit defaults to 25 results.
        */
        const response = await databases.listDocuments(
            DATABASE_ID,
            COLLECTION_ID_MESSAGES,
            [
                Query.orderDesc('$createdAt'),
                Query.limit(100),
            ]
        )
        console.log(response);
        /*
        {
            "total": 2,
            "documents": [
                {
                    "user_id": "66871886003757bb22b0",
                    "username": "Prabhat Mishra ",
                    "body": "gg",
                    "$id": "66961398003248eb4ef3",
                    "$tenant": "161134",
                    "$createdAt": "2024-07-16T06:30:55.459+00:00",
                    "$updatedAt": "2024-07-16T06:30:55.459+00:00",
                    "$permissions": [
                        "update(\"user:66871886003757bb22b0\")",
                        "delete(\"user:66871886003757bb22b0\")"
                    ],
                    "$databaseId": "66844ae10039f9f1e451",
                    "$collectionId": "66844af300084549cc36"
                },
                {
                    "user_id": "66871886003757bb22b0",
                    "username": "Prabhat Mishra ",
                    "body": "what about today?",
                    "$id": "669610c2002ca36855b1",
                    "$tenant": "161134",
                    "$createdAt": "2024-07-16T06:18:48.409+00:00",
                    "$updatedAt": "2024-07-16T06:18:48.409+00:00",
                    "$permissions": [
                        "update(\"user:66871886003757bb22b0\")",
                        "delete(\"user:66871886003757bb22b0\")"
                    ],
                    "$databaseId": "66844ae10039f9f1e451",
                    "$collectionId": "66844af300084549cc36"
                }
            ]
        }
        */
        setMessages(response.documents)
    }


    const handleSubmit = async (e) => {
        e.preventDefault();

        console.log('MESSAGE:', messageBody)

        /*
            Permission.write() :- Alias to grant create, update, and delete access for collections and buckets and update and delete access for documents and files.

            Role.user([USER_ID], [STATUS]) :- Grants access to a specific user by user ID. You can optionally pass the verified or unverified string to target specific types of users.
        */

        /*
            In appwrite we set permissions as "all users can only create and read documents."
            and enabled document security.

                > When document security is enabled, users will be able to access documents for which they have been granted either document or collection permissions.

                > If document security is disabled, users can access documents only if they have collection permissions. Document permissions will be ignored.

                > In simple words, here the user can create documents and read all documents but we provide some additional permissions so that it can only delete its documents, not others..
        */

        // here it is document permissions
        const permissions = [
            Permission.write(Role.user(user.$id)),
          ]

        const payload = {
            user_id:user.$id,
            username:user.name,
            body:messageBody
        }
        /*
            const promise = databases.createDocument(
                '<DATABASE_ID>',
                '[COLLECTION_ID]',
                ID.unique(),
                {}
            );
        */
        const response = await databases.createDocument(
                DATABASE_ID, 
                COLLECTION_ID_MESSAGES, 
                ID.unique(), 
                payload,
                permissions
            )

        console.log('CREATED RESPONSE:', response)

        // no need to change because it was handled in "unsubscribe()".
        // setMessages(prevState => [response, ...prevState])

        setMessageBody('')
    }

    const deleteMessage = async (id) => {
        /*
            const result = await databases.deleteDocument(
                '<DATABASE_ID>', // databaseId
                '<COLLECTION_ID>', // collectionId
                '<DOCUMENT_ID>' // documentId
            );
        */
        
        await databases.deleteDocument(DATABASE_ID, COLLECTION_ID_MESSAGES, id);

        //const response = await databases.deleteDocument(DATABASE_ID, COLLECTION_ID_MESSAGES, id);

        // console.log("delete response : ",response);

        //no need to change because it was handled in "unsubscribe()".
        // setMessages(prevState => prevState.filter(message => message.$id !== id))
     } 

  return (
    <main className="container">

        <Header/>

        <div className="room--container">

            {/* for texting messages:- */}
            <form id="message--form" onSubmit={handleSubmit}>
                <div>
                    <textarea 
                        required 
                        maxLength={250}
                        placeholder="Say something..." 
                        onChange={(e) => {setMessageBody(e.target.value)}}
                        value={messageBody}
                        ></textarea>
                </div>

                <div className="send-btn--wrapper">
                    <input className="btn btn--secondary" type="submit" value="send"/>
                </div>
            </form>
            
            <div>
                {messages.map(message => (
                    // In appwrite,id stores as "$id" , just like in mongoDb it stores as "_id"
                    <div key={message.$id} className={"message--wrapper"}>

                        <div className="message--header">
                            <p> 
                                {
                                    message?.username ? (
                                        <span> {message?.username}</span>
                                    ): (
                                        <span>Anonymous user</span>
                                    )
                                }
                            
                                <small className="message-timestamp"> {new Date(message.$createdAt).toLocaleString()}</small>
                            </p>

                            {/* 
                                Example:-
                                    [
                                        "update(\"user:66871886003757bb22b0\")",
                                        "delete(\"user:66871886003757bb22b0\")"
                                    ]
                            */}
                            {/* Trash2 is nothing but an icon. */}
                            {message.$permissions.includes(`delete(\"user:${user.$id}\")`) && (
                                <Trash2 className="delete--btn" onClick={() => {deleteMessage(message.$id)}}/>
                                
                             )}
                        </div>

                        <div className={"message--body" + (message.user_id === user.$id ? ' message--body--owner' : '') }>
                            <span>{message.body}</span>
                        </div> 
        
                    </div>
                ))}
            </div>

        </div>
    </main>
  )
}

export default Room